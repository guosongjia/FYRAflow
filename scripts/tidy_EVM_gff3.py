import argparse
##############################################################
#  script: tidy_EVM_gff3.py
#  author: Guo-Song Jia
#  last edited: 2021.12.10
#  description: Script for in FYRAflow workflow. Tidy up the EVM output gff3 file and rename gene name.
##############################################################

# Argparse settings
parser = argparse.ArgumentParser(
    description='This is a build-in script in FYRAflow workflow. It can tidy up the EVM output gff3 file and rename gene name.')
parser.add_argument("-g", "--genome", required=True, dest='genomeFasta',
                    help='Input the genome fasta file.')
parser.add_argument("-i", "--input", required=True, dest='inputGffFile',
                    help='Input the gff3 file generated by EVM.')
parser.add_argument("-t", "--genomeTag", required=True, dest='genomeTag',
                    help='Type the genomic Tag for gene renaming.')
parser.add_argument("-o", "--output", required=True, dest='outputGffFile',
                    help='Type the genomic Tag for gene renaming.')
args = parser.parse_args()

# Read the contig length of genome fasta
def readInputFasta(inputfasta):
    with open(inputfasta) as readin:
        lengthDict = {}
        header = None
        for i in readin.readlines():
            length = 0
            if i.startswith(">"):
                header = str(i.split(">")[1][:-1])
                lengthDict[header] = 0
            else:
                length = length + int(len(i.split("\n")[0]))
                lengthDict[header] = length
    return lengthDict

# Read the coding gene name as list
def readGeneListFromGff(inputgff):
    with open(inputgff) as readin:
        geneList = [".".join(i.split("\t")[8].split(";")[0].split("=")[1].split(".")[2:]) for i in readin.readlines() if i!="\n" and i.split("\t")[2] == "gene" and "trnascan" not in i.split("\t")[8].split(";")[0]]
    return geneList

# Read the tRNA gene name as list
def readTrnaListFromGff(inputgff):
    with open(inputgff) as readin:
        trnaList = [i.split("\t")[8].split(";")[0].split("=")[1] for i in readin.readlines() if i!="\n" and i.split("\t")[2] == "gene" and "trnascan" in i.split("\t")[8]]
    return trnaList

# Clean coding gene annotation
def cleanGeneAnnotation(geneID,geneIndex,genomeTag,inputgff):
    with open(inputgff) as readin:
        contigName = "".join(geneID.split(".")[0])
        geneNewName = str(genomeTag) + "_" + str(contigName) + "_G" + str(geneIndex).zfill(5)
        searching = geneID + "\n"
        result = list()
        for i in readin.readlines():
            if i == "\n":
                continue
            elif searching in i.split("\t")[8]:
                itemType = i.split("\t")[2]
                if itemType == "gene":
                    result.append("\t".join(i.split("\t")[0:8]) + "\tID=" + str(geneNewName) + ";Name=" + str(geneNewName))
                elif itemType == "mRNA":
                    mrnaParent = str(geneNewName) + ".mRNA.1"
                    result.append("\t".join(i.split("\t")[0:8]) + "\tID=" + str(geneNewName) + ";Name=" + str(geneNewName) + ";Parent=" + str(mrnaParent))
                elif itemType == "exon":
                    mrnaParent = str(geneNewName) + ".mRNA.1"
                    exonIndex = "".join(i.split("\t")[8].split(";")[0].split("n")[1])
                    exonName = str(geneNewName) + ".mRNA.1.exon." + str(exonIndex)
                    result.append("\t".join(i.split("\t")[0:8]) + "\tID=" + str(exonName) + ";Name="+str(exonName)+";Parent=" + str(mrnaParent))
                elif itemType == "CDS":
                    mrnaParent = str(geneNewName) + ".mRNA.1"
                    cdsName = "cds." + str(geneNewName)
                    result.append("\t".join(i.split("\t")[0:8]) + "\tID=" + str(cdsName) + ";Name="+str(cdsName)+";Patent=" + str(mrnaParent))
    return result

# Clean tRNA gene annotation
def cleanTrnaAnnotation(TrnaID,TrnaIndex,genomeTag,inputgff):
    with open(inputgff) as readin:
        result = list()
        for i in readin.readlines():
            if i == "\n":
                continue
            elif TrnaID in i.split("\t")[8] and i.split("\t")[2] == "tRNA":
                trnaType = "".join(i.split("\t")[8].split("-")[3])
                trnaContig = i.split("\t")[0]
                trnaNewName = str(trnaContig)+".trna_"+str(trnaType)+"."+str(TrnaIndex)
                result.append("\t".join(i.split("\t")[0:8])+"\tID="+str(trnaNewName)+";Name="+str(trnaNewName))
    return result

ContigLengthDict = readInputFasta(args.genomeFasta)
geneList = readGeneListFromGff(args.inputGffFile)
trnaList = readTrnaListFromGff(args.inputGffFile)

with open(str(args.outputGffFile),'w') as outputFile:
    outputFile.write("##gff-version 3\n")
    for contig,length in ContigLengthDict.items():
        outputFile.write("##sequence-region " + str(contig) + " 1 " + str(length) + "\n")
    for gene in geneList:
        geneIndex = geneList.index(gene) + 1
        outputFile.write("\n".join(cleanGeneAnnotation(str(gene),geneIndex,str(args.genomeTag),args.inputGffFile)) + "\n")
    for trna in trnaList:
        trnaIndex = trnaList.index(trna) + 1
        outputFile.write("\n".join(cleanTrnaAnnotation(str(trna),trnaIndex,str(args.genomeTag),args.inputGffFile)) + "\n")
